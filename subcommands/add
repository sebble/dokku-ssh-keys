#!/usr/bin/env bash
set -eo pipefail; [[ $DOKKU_TRACE ]] && set -x
source "$PLUGIN_CORE_AVAILABLE_PATH/common/functions"
source "$PLUGIN_AVAILABLE_PATH/ssh-keyz/functions"

add_keys() {
  declare desc="add a new key via sshcommand"
  local cmd="ssh-keyz:add"
  shift
  local name="$1" key_file="$2" key_contents key_from_pipe tmp_key_file
  [[ -p /dev/stdin ]] && read -r key_from_pipe
  if [[ -n "$key_from_pipe" ]]; then
    tmp_key_file="$(mktemp)" && echo "$key_from_pipe" > "$tmp_key_file"
    ssh-keygen -lf "$tmp_key_file" &> /dev/null || { rm "$tmp_key_file"; dokku_log_fail "Key piped in is not a valid ssh public key"; }
    rm "$tmp_key_file"
    key_contents="$key_from_pipe"
  elif [[ -n "$key_file" ]]; then
    key_contents="$(cat "$key_file")"
    ssh-keygen -lf "$key_file" &> /dev/null || dokku_log_fail "Key from file is not a valid ssh public key"
  fi
  [[ -n "$name" && -n "$key_contents" ]] || dokku_log_fail "Two arguments are required if not piping, ie: dokku ssh-keyz:add <NAME> <KEY_FILE>"
  local count="$(wc -l <<< "$key_contents")"
  [ "$count" -eq 1 ] || dokku_log_fail 'Too many keys provided, set one per invocation of dokku ssh-keyz:add <NAME> <KEY_FILE>'
  create_ssh_key_file
  verify_ssh_key_exists
  echo "$key_contents" | sshcommand acl-add dokku "$name" || dokku_log_fail "sshcommand returned an error: $?"
  verify_ssh_key_file
}

add_keys "$@"
